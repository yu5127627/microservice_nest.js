{"version":3,"file":"category.2706f7ad.js","sources":["../../src/views/cms/category/category.vue"],"sourcesContent":["<template>\n  <div class=\"page-main\">\n    <div class=\"operate-box\">\n      <div class=\"operate-btns\">\n        <el-button\n          type=\"primary\"\n          @click=\"group = ''; parentCate = {}; openDialog(dialogData, '新增分类')\"\n        >新增</el-button>\n      </div>\n      <el-button type=\"primary\" icon=\"Refresh\" @click=\"() => { getList() }\" />\n    </div>\n\n    <el-tree\n      v-loading=\"list.load\"\n      :data=\"list.data\"\n      node-key=\"id\"\n      :props=\"{\n        children: 'children',\n        label: 'name',\n      }\"\n      default-expand-all\n      :expand-on-click-node=\"false\"\n    >\n      <template #default=\"{ node, data }\">\n        <span class=\"custom-tree-node\">\n          <template v-if=\"data.id\">{{ data.id }}_</template>\n          {{ node.label }}\n          <template v-if=\"data.sort\">({{ data.sort }})</template>\n          <el-button\n            type=\"primary\"\n            :icon=\"Plus\"\n            size=\"small\"\n            @click=\"() => { group = data.group || node.label; data.id ? parentCate = data : null; openDialog(dialogData, '新增分类'); }\"\n          />\n          <template v-if=\"data.group\">\n            <el-button\n              type=\"primary\"\n              :icon=\"Edit\"\n              size=\"small\"\n              @click=\"openDialog(dialogData, '编辑分类', data)\"\n            />\n            <el-button\n              type=\"danger\"\n              :icon=\"Delete\"\n              size=\"small\"\n              @click=\"handleDelete([data.id], MODULE)\"\n            />\n          </template>\n        </span>\n      </template>\n    </el-tree>\n\n    <category-dialog\n      v-if=\"dialogData.visible\"\n      :dialog-data=\"dialogData\"\n      :module=\"MODULE\"\n      :group=\"group\"\n      :parent-cate=\"parentCate\"\n    />\n  </div>\n</template>\n\n<script lang='ts'>\nimport { requestList } from '@/api/cms/category';\nimport { defineComponent, reactive, ref } from 'vue';\nimport { Edit, Delete, Plus } from '@element-plus/icons-vue';\nimport CategoryDialog from './components/categoryDialog.vue';\nimport { openDialog, handleDelete } from '@/api/base';\nimport { emitter } from '@/utils/mitt';\n\ninterface ListData {\n  name: string;\n  children: Array<Category.CategoryRow>\n}\nconst MODULE = 'blog/category';\nexport default defineComponent({\n  name: \"Category\",\n  components: { CategoryDialog },\n  setup() {\n    let parentCate = reactive({});\n    let group = ref<string>('');\n    let dialogData = reactive<DialogData<Category.CategoryRow | {}>>({\n      visible: false,\n      title: \"\",\n      data: {}\n    });\n    let list = reactive<TableList<ListData>>({\n      data: [],\n      load: false,\n      query: {\n        limit: 20,\n        page: 1,\n        total: 0,\n        attrs: \"all\"\n      }\n    });\n\n    // 递归合并分类\n    const deepMergeCate = (cate: any, cates: any) => {\n      let arr = [];\n      for (const item of cates) {\n        if (item.pid === cate.id) {\n          let children = deepMergeCate(item, cates);\n          if (children.length) item.children = children;\n          arr.push(item);\n        }\n      }\n      if (arr.length) cate.children = arr;\n      return arr;\n    };\n\n    const getList = async () => {\n      try {\n        list.load = true;\n        const { code, result } = await requestList(list.query);\n        // 排序\n        result.sort((a: Category.CategoryRow, b: Category.CategoryRow) => a.sort - b.sort);\n        // 筛选出所有分组，重组复合条件的数据结构\n        const groups: Array<ListData> = [...new Set(result.map((item: Category.CategoryRow) => item.group))].map((item: string) => { return { name: item, children: [] }; });\n        for (const col of groups) {\n          // 当前分组下所有分类\n          let currentCates = [];\n          // 当前分组下的一级分类\n          let currentTopCate = [];\n          for (const item of result) {\n            // 筛选出当前分组下分类\n            if (item.group === col.name) {\n              currentCates.push(item);\n              // 筛选出当前分组下的一级分类\n              if (item.pid === 0) currentTopCate.push(item);\n            }\n          }\n          // 根据顶级分类递归做合并\n          for (const topCate of currentTopCate) topCate.children = deepMergeCate(topCate, currentCates);\n          // 保存到当前分组下\n          col.children.push(...currentTopCate);\n        }\n        list.data = groups;\n        list.load = false;\n      }\n      catch (error) {\n        list.load = false;\n      }\n    };\n    getList();\n\n    emitter.on('list-reload', (key) => {\n      if (key === MODULE) getList();\n    });\n\n    return {\n      parentCate,\n      group,\n      MODULE,\n      list,\n      dialogData,\n      Edit,\n      Delete,\n      Plus,\n      openDialog, handleDelete, getList\n    };\n  }\n});\n</script>\n\n<style lang='less' scoped>\n:deep {\n  .el-tree-node__content {\n    margin: 1px 0;\n  }\n}\n.custom-tree-node {\n  height: 30px;\n  line-height: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  .el-button:first-child {\n    margin-left: 20px;\n  }\n}\n</style>\n"],"names":["Edit","Delete","Plus","_openBlock","_createElementBlock","_createElementVNode","_createVNode","_withCtx","_Fragment","_createTextVNode","_toDisplayString","_createCommentVNode","_createBlock"],"mappings":"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"}